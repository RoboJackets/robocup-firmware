#!/bin/bash -e

HELP_STR="Usage: ./ubuntu-setup [-y | --yes] [-n | --noclobber] [-c | --clobber] [-f | --firmware] [-nf | --nofirmware] [-osl | --overwrite-sources-list ] [-h | --help]

\tyes:\t\t\tassume no user input
\tnoclobber:\t\tdont install 3rd party repositories
\tclobber:\t\tInstall 3rd party repositories
\tfirmware:\t\tInstall firmware repository
\tnofirmware:\t\tPrevents installation of firmware deps firmware repository
\toverwrite-sources-list:\tOverwrites the sources.list with gatech mirrors for faster ubuntu-setup. Only works on ubuntu > precise.
\thelp:\t\t\tprint this message!

This script will need root privileges"

DISTRO_STR="The linux distro you are using is not supported by ubuntu-setup. Please file an issue if you want to request your debian based distro to be added."

# defaults!
OVERWRITE_SOURCES=false
YES=false
SYSTEM="unknown"

if cat /etc/os-release | grep -iq '^NAME=.*Debian'; then # dont add repositories on debian, unsupported
    echo "[WARN] You are using a flavor of debian. This configuration is not officially supported..." >&2
    SYSTEM="debian"
elif cat /etc/os-release | grep -iq '^NAME=.*Ubuntu'; then # We are using a version of ubuntu...
    if cat /etc/os-release | grep -iq '^VERSION=.*18.04'; then # Using Ubuntu 18.04
        echo "Ubuntu 18.04 Detected..."
        SYSTEM="ubuntu-18.04"
    elif cat /etc/os-release | grep -iq '^VERSION=.*19*'; then # Using Ubuntu 19.X
	echo "Ubuntu 19.X Detected..."
	SYSTEM="ubuntu-19"
    else
        echo "$DISTRO_STR" >&2
        exit 1
    fi
else
    echo "$DISTRO_STR" >&2
    exit 1
fi

# parse command line args
for i in "$@"
do
    case $i in
        -y|--yes)
            YES=true
            ;;
        -h|--help)
            echo -e "$HELP_STR"
            exit 1
            ;;
        *)
            echo "Unrecognized Option: $i"
            echo -e "\n$HELP_STR"
            exit 1
            # unknown options
            ;;
    esac
done

# Become root
if [ $UID -ne 0 ]; then
	echo "-- Becoming root"
	exec sudo $0 $@
fi

# ask for permission to modify apt sources if '-y' flag abesnt
if [ "ubuntu-18.04" = "$SYSTEM" -a "$YES" != true ]; then
	echo "Need to add xenial universe to package lists for arm compiler support."
	read -r -p "Is this okay? [y/N] " response
	case "$response" in 
	[yY][eE][sS]|[yY]) 
        	;;
    	*)
		echo "cannot continue on Bionic without permission to add to lists"
		echo "-- exit"
		exit 1
        	;;
	esac
fi

if [ "ubuntu-18.04" = "$SYSTEM" ]; then
	SOURCE_LIST=/etc/apt/sources.list.d/gcc-arm-none-eabi_xenial.list
	if [ ! -f "$SOURCE_LIST" ]; then
		echo "-- adding xenial universe to support arm compiler"
		cat << EOF > $SOURCE_LIST
# robocup-firmware added xenial universe for gcc-arm-none-eabi 5.4.1
deb http://archive.ubuntu.com/ubuntu xenial universe
deb http://archive.ubuntu.com/ubuntu xenial main
EOF
	else
		echo "-- found xenial universe to support arm compiler"
	fi
fi

apt-get update

MACH=$(uname -m)
unset DPKG_FLAGS

BASE=$(readlink -f $(dirname $0)/..)

echo "-- Installing udev rules"
cp -f $BASE/util/robocup.rules /etc/udev/rules.d/
udevadm control --reload || true # reload rules

echo "-- Installing required packages"

# if yes option is checked, add  a -y
ARGS=""
if $YES; then
    ARGS="-y"
fi

TOOLCHAIN_PACKAGES="libnewlib-dev libnewlib-arm-none-eabi gcc-arm-none-eabi libstdc++-arm-none-eabi-newlib"
if [ "ubuntu-18.04" = "$SYSTEM" ]; then
	# check for missing compiler
	ARM_COMPILER=true
	if [[ $(dpkg -s gcc-arm-none-eabi) -ne 0 ]]; then
		ARM_COMPILER=false
	else
		echo "-- found existing ARM compiler install, verifying"
	fi

	# compiler is installed, check if the version is correct
	if [ "$ARM_COMPILER" = true ]; then
		if [[ $(apt-cache policy gcc-arm-none-eabi) = *"Installed: 15:4.9.3"* ]]; then
			echo "-- detected good arm compiler version"
		else
			echo "-- detected bad arm compiler verison, purging"
			apt-get purge $TOOLCHAIN_PACKAGES $ARGS
			apt-get autoremove $ARGS
		fi
	fi

	PACKAGES="$(sed 's/#.*//;/^$/d' $BASE/util/ubuntu-18.04-packages.txt)"
else
	PACKAGES="$(sed 's/#.*//;/^$/d' $BASE/util/ubuntu-packages.txt)"
fi

# install all of the packages listed in required_packages.txt
apt-get install $ARGS $PACKAGES

if [ "$SYSTEM" = "ubuntu-18.04" ]; then
	echo "-- pinning arm toolchain"
	apt-mark hold $TOOLCHAIN_PACKAGES
fi


# install python3 requirements
pip3 install -r $BASE/util/requirements3.txt
# install python2 requirements
pip2 install -r $BASE/util/requirements2.txt

chown -R $SETUP_USER:$SETUP_USER $BASE/robot/lib
su $SETUP_USER -c 'git submodule sync'
su $SETUP_USER -c 'git submodule update --init'
